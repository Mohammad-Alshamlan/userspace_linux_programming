//

Thu Aug 28, 2014
-------------------
objective:
[1] develop a case study that can be used in the future as a reference

steps:
[1] availabe functions
	1. using system()
	// example
	#include<stdlib.h>
	int main ()
	{
		int rc = system("ls -l /");
		return rc;
	}
	
	2. using fork() and exec
	Note[1]: fork() makes a child process that is an exact copy of its parent process
	    [2]: exec() family causes a particular prcess to cease being an instance of one program and to instead become an instance of 
	         another program
	    [3] simply put, to spawn a new process, you first use fork() to make a copy of the current process, then you use exec to
	        transform one of these processes into an instance of the program you want to spawn. 
	// example
	#include<stdio.h>
	#include<stdlib.h>
	#include<unistd.h>
	// spawn a child process running a new program
	int spawn (char *program, char **arg_list)
	{
		pid_t child_pid;
		/* Duplicate this process */
		child_pid = fork();
		if (child_pid != 0)
			/* this is the parent process */
			return child_pid;
		else {
			/* now execute PROGRAM, searching for it in the path */
			execvp (program, arg_list);
			/* the execvp function returns only if an error occurs */
			fprintf (stderr, "an error occurred in execvp\n");
		}
	}
	
	int main()
	{
		/* the argument list to pass to the "ls" commad */
		char *arg_list = {
			"ls", 	/* argv[0], the name of the program */
			"-l", 	
			"/",
			NULL
		}; 
		/* spawn a child process */
		spawn("ls", arg_list);
		return 0;		
	}
	
	3. popen() and pclose()
	Note[1]: the popen() and pclose() functions ease this paradigm by eliminating the need to invoke: pipe(), fork(), dub2(), exec(), 
	         and fdopen().
	         // example, writing into the child process
	         #include<stdio.h>
	         #include<unistd.h>
	         int main()
	         {
	         	FILE *stream = popen("sort", "w");
	         	fprintf(stream, "This is a test.\n");
	         	fprintf(stream, "Hello, world\n");
	         	return pclose(stream);
	         }
	         // example, reading from a child
	         char statCmd[MAX_SHELL_CMD_STR_LEN];
	         FILE *fp=NULL;
	         if(is_wifi_ctl_initialized()){
	         	snprintf(statCmd,MAX_SHELL_CMD_STR_LEN, "cat /sys/class/net/%s/statisics/%s", gstWifiCtl.ifName, type );
	         	fp= popen(statCmd, "r");
	         	if(fp) {
	         		fscanf(fp, "%u", &uvalue);
	         		pclose(fp);
	         	}
	         }


