//

Wed Nov 12, 2014
-----------------
objectives:
[1] updating to-do-list tasks

to-do-list:
[1] write more linux c code
[2] try also to use C++ 
[3] build with makefile
[4] use "doxygen" to document the code
[5] try to use more advance debugging
[6] make a full embedded system that runs you program
	>> buildroot
	>> linux kernel
	>> busybox
	>> gnu toolchain
	>> u-boot
	>> qemu
	>> ssh server -- dropbear (or NFS and telnet) 
[7] use ctags + gvim for development
[8] github is good choice, but also try "bitbucket" + "git"
[9] use these sysclass
	>> pread()
	>> readv()
[10] use "GNU Gprof"
[11] use encrypted directory in github
[12] write good examples for UPD/IP and TCP/IP server and client code
[13] write good examples for simple kernel driver code
[14] reintegrate dropbox notes with this github
[15] know how to install the needed docs for your system, 
	//such as kernel docs
	(bash) $ sudo apt-get install linux-doc
	// userspace doc
	(bash) $ sudo apt-get install user-mode-linux-doc
	// or search for it!!
	(bash) $ sudo apt-cache search doc
	
	// for example searching for c++ docs and example
	(bash) $ sudo apt-cache search doc | grep -i c++
	// I'm able to get the following:
	libsigc++-2.0-doc - type-safe Signal Framework for C++ - reference documentation
	libstdc++-4.8-doc - GNU Standard C++ Library v3 (documentation files)
	libstdc++-4.9-doc - GNU Standard C++ Library v3 (documentation files)
	libstdc++6-4.7-doc - GNU Standard C++ Library v3 (documentation files)
	c++-annotations - Extensive tutorial and documentation about C++
	c++-annotations-contrib - Extensive tutorial and documentation about C++ - contributed files
	c++-annotations-dvi - Extensive tutorial and documentation about C++ - DVI output
	c++-annotations-html - Extensive tutorial and documentation about C++ - html output
	c++-annotations-latex - Extensive tutorial and documentation about C++ - LaTeX output
	c++-annotations-pdf - Extensive tutorial and documentation about C++ - PDF output
	c++-annotations-ps - Extensive tutorial and documentation about C++ - Postscript output
	c++-annotations-txt - Extensive tutorial and documentation about C++ - text output
	cwebx - C/C++ literate programming system (Marc van Leeuwen's version)
	libace-doc - C++ network programming framework - documentation
	libasio-doc - documentation for asio C++ library for network programming
	libga2 - C++ Library of Genetic Algorithm Components
	stl-manual - C++-STL documentation in HTML
	stx-btree-doc - b+tree implementation in c++, doxygen documentation
	cppreference-doc-en-html - C and C++ standard library reference (English, Devhelp variant)


Mon Sep 29, 2014
-----------------
objectives:
[1] add my to-do-list tasks

to-do-list:
[1] write more linux c code
[2] try also to use C++ 
[3] build with makefile
[4] use "doxygen" to document the code
[5] try to use more advance debugging
[6] make a full embedded system that runs you program
	>> buildroot
	>> linux kernel
	>> busybox
	>> gnu toolchain
	>> u-boot
	>> qemu
	>> ssh server -- dropbear (or NFS and telnet) 
[7] use ctags + gvim for development
[8] github is good choice, but also try "bitbucket" + "git"
[9] use these sysclass
	>> pread()
	>> readv()
[10] use "GNU Gprof"

Fri Sept 26, 2014
-----------------
objectives:
[1] write the needed c function
[2] create git repo, and use it for development
[3] create the needed makefile architcture
[4] push git repo into github
[5] try to move some of my development away from busybox to github

sources:
[1] https://help.github.com/articles/setting-your-email-in-git

steps:
[1] create a new Repository in github
	I assume you can figure this out, so link is https://github.com/Mohammad-Alshamlan/userspace_linux_programming.git

[2] setting git the first time
	// to do "git commit" you need to register your email address
	// to register your email address is the following
	$ git config --global user.email "malsh002@fiu.edu"
	// setting your name
	$ git config --global user.name "alshamlan"
	
	// for checking do the following
	alshamlan@alshamlan-Precision-M6700 $ git config --global user.email 
	malsh002@fiu.edu
	alshamlan@alshamlan-Precision-M6700 $ git config --global user.name 
	alshamlan
	alshamlan@alshamlan-Precision-M6700 $
	 	
[3] create local git repo and push it 
	// create the git repo
	$ git init
	// include everything to this point
	$ git add .
	// commit
	$ git commit -m 'init'
	// add github repo
	$ git remote add origin https://github.com/Mohammad-Alshamlan/userspace_linux_programming.git
	// check the link if it setup accordingly
	$ git remote -v
	// push the whole local repo into github
	$ git push -u origin master
	
	// for cloning it
	$ git clone https://github.com/Mohammad-Alshamlan/userspace_linux_programming.git

[3] 


create git repo
[2] 

Fri Sept 5, 2014
-----------------
objectives
[1] write the needed c function
[2] create git repo, and use it for development
[3] create the needed makefile architcture
[4] push git repo into github
[5] try to move some of my development away from busybox to github

resuorces:
[1] reading "1_C_language/1_C_system programming/linux system programming"
[2] 

study:
	from "linux syscall" -- topic basic syscall
	// manpage section 2 
	open()	// open the file
	leek()	// chenging the offset of the opened file
	read()	// read and increament the offset
	pread()	// read without incremnting the offset
	
	from "C std libraries"
	// manpage section 3
	fopen()	// open a stream, which means copy the memory from kernelspace to the userspace 
	fseek()	// chenging the offset of the opened file
	fsetpos()	// == fseek() with whence=SEEK_SET
	fgetpos()	// == fseek() with whence=SEEK_CUR
	// note: fsetpos() and fgetpos() are used for portablity with non-Unix Oses
	rewind()	// fseek(stream, 0, SEEK_SET);
	
	form "advance syscalls" -- topic "scatterGather I/O"
	// manpage section 2
	readv()	// read in peralle
	writev()	// write in perelle
	
	form "advance syscalls" -- topic "mapping file into memory"
	// manpage section 2 
	mmap()	// one-to-one corresponding between memory address and a word in the file -- mapping a file into a process's address space
	munmap()	// removing the mapped-memory
	fstat() 	// is identical to stat(), except that the file to be stat-ed is specified by the file descriptor fd.
	// mmap() needs size, and fstat() gives a struct back. For example, 
		struct stat sb;
		char *p;
		int fd;
		if ( fstat(fd, &sb) == -1) {
			perror("ftat");
			return 1;
		}
		p = mmap(0, sb.st_size, PROT_READ, MAP_SHARED, fd, 0);
		if(p==MAP_FAILED){
			perror("mmap");
			return 1;
		}
		// there is no need to continue opening the file because we already have a copy in the mapped-memory, so close it!!
		if(close(fd)==-1){
			perror("mmap");
			return 1;
		}
		
		// if we want to output the information from the mapped-memory
		off_t len;
		for(len = 0; len < sn.st_size; len++)
			putchar(p[len]);
			
		// then to un-map the memory, do the following
		if(mumap(p, sb.st_size)==-1){
			perror("mumap");
			return 1;
		}
		

steps:
